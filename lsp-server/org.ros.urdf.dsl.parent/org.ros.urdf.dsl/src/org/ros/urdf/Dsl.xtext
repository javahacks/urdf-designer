grammar org.ros.urdf.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.ros.org/model/urdf"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RobotType returns RobotType:
	'robot' name=ID ('version' '=' version=STRING)? '{'
	('materials' '{' material+=(TextureGlobal | ColorGlobal)* '}')?
	('links' '{' link+=(BoxLink | SphereLink | MeshLink | CylinderLink)* '}')?
	('joints' '{' joint+=(FixedJoint | RevoluteJoint | ContinousJoint | PrismaticJoint)* '}')?
	'}';

Origin returns Pose:
	'xyz' '=' xyzVector=Vector3 ('rpy' '=' rpyVector=Vector3)?;

Axis returns Axis:
	'axis-xyz' '=' xyzVector=Vector3;

Limit returns Limit:
	'lower-limit' '=' lower=DOUBLE
	'upper-limit' '=' upper=DOUBLE;

InlineMaterial returns Material:
	'material' '=' materialRef=[MaterialGlobal];

BoxLink returns Link:
	'box' name=ID visual+=BoxVisual;

SphereLink returns Link:
	'sphere' name=ID visual+=SphereVisual;

MeshLink returns Link:
	'mesh' name=ID visual+=MeshVisual;

CylinderLink returns Link:
	'cylinder' name=ID visual+=CylinderVisual;

BoxVisual returns Visual:
	geometry=BoxGeometry
	material=InlineMaterial?
	('{' origin=Origin '}')?;

SphereVisual returns Visual:
	geometry=SphereGeometry
	material=InlineMaterial?
	('{' origin=Origin '}')?;

CylinderVisual returns Visual:
	geometry=CylinderGeometry
	material=InlineMaterial?
	('{' origin=Origin '}')?;

MeshVisual returns Visual:
	geometry=MeshGeometry
	material=InlineMaterial?
	('{' origin=Origin '}')?;

BoxGeometry returns Geometry:
	box=Box;

CylinderGeometry returns Geometry:
	cylinder=Cylinder;

SphereGeometry returns Geometry:
	sphere=Sphere;

MeshGeometry returns Geometry:
	mesh=Mesh;

Box returns Box:
	dimension=BoxDimension;

BoxDimension returns Vector3:
	'length' '=' a=DOUBLE 'width' '=' b=DOUBLE 'height' '=' c=DOUBLE;

Cylinder returns Cylinder:
	'length' '=' length=DOUBLE 'radius' '=' radius=DOUBLE;

Sphere returns Sphere:
	'radius' '=' radius=DOUBLE;

Mesh returns Mesh:
	'file-name' '=' filename=STRING ('scale-xyz' '=' scaleVector=Vector3)?;

TextureGlobal returns MaterialGlobal:
	'texture' name=ID texture=Texture;

Texture returns Texture:
	'file-name' '=' filename=STRING;

ColorGlobal returns MaterialGlobal:
	'color' name=ID color=Color;

Color returns Color:
	'rgba' '=' color=Vector4;

FixedJoint returns Joint:
	{Joint} type="fixed" name=ID parent=Parent child=Child ('{'
	origin=Origin?
	'}')?;

RevoluteJoint returns Joint:
	{Joint} type="revolute" name=ID parent=Parent child=Child ('{'
	origin=Origin?
	axis=Axis?
	limit=Limit?
	'}')?;

ContinousJoint returns Joint:
	{Joint} type="continuous" name=ID parent=Parent child=Child ('{'
	origin=Origin?
	axis=Axis?
	'}')?;

PrismaticJoint returns Joint:
	{Joint} type="prismatic" name=ID parent=Parent child=Child ('{'
	origin=Origin?
	axis=Axis?
	limit=Limit?
	'}');

Parent:
	'parent-name' '=' linkRef=[Link];

Child:
	'child-name' '=' linkRef=[Link];

Vector3:
	'(' a=DOUBLE ',' b=DOUBLE ',' c=DOUBLE ')';

Vector4:
	'(' a=DOUBLE ',' b=DOUBLE ',' c=DOUBLE ',' d=DOUBLE ')';

DOUBLE returns ecore::EDouble:
	'-'? INT ('.' INT)?;

@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;	